---
import { twMerge } from 'tailwind-merge';
import type { ItemGrid } from '~/types';
import Button from './Button.astro';
import { Icon } from 'astro-icon/components';
import Image from '../common/Image.astro';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props as ItemGrid;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
  action: actionClass = '',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `mx-auto grid gap-8 md:gap-y-12 ${
          columns === 4
            ? 'sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4'
            : columns === 3
              ? 'sm:grid-cols-2 lg:grid-cols-3'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, image, icon, callToAction, classes: itemClasses = {}, href }) => {
        const divData = (
          <div>
            <div class={twMerge('flex max-w-md flex-row', panelClass, itemClasses?.panel)}>
              <div class="flex justify-center">
                {(icon || defaultIcon) && (
                  <Icon
                    name={icon || defaultIcon}
                    class={twMerge('mr-2 h-7 w-7 rtl:ml-2 rtl:mr-0', defaultIconClass, itemClasses?.icon)}
                  />
                )}
              </div>
              <div class="mt-0.5 w-full	">
                {image && (
                  <div class="relative mb-6 rounded bg-white shadow-lg dark:bg-slate-700 md:h-64">
                    <Image
                      {...image}
                      class="w-full rounded bg-white object-cover shadow-lg md:h-full"
                      widths={[400, 900]}
                      width={400}
                      sizes="(max-width: 900px) 400px, 900px"
                      aspectRatio="16:9"
                      layout="cover"
                      loading="lazy"
                      decoding="async"
                      style="object-fit: cover !important;"
                    />
                  </div>
                )}

                {title && <h3 class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</h3>}
                {description && (
                  <p
                    class={twMerge(`${title ? 'mt-3' : ''} text-muted`, descriptionClass, itemClasses?.description)}
                    set:html={description}
                  />
                )}
                {callToAction && (
                  <div class={twMerge(`${title || description ? 'mt-3' : ''}`, actionClass, itemClasses?.actionClass)}>
                    <Button variant="link" {...callToAction} />
                  </div>
                )}
              </div>
            </div>
          </div>
        );

        if (href) {
          return <a href={href}>{divData}</a>;
        }
        return divData;
      })}
    </div>
  )
}
