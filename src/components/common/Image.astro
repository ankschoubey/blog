---
import { findImage } from '~/utils/images';
import {
  getImagesOptimized,
  astroAsseetsOptimizer,
  unpicOptimizer,
  type ImageProps,
  type AttributesProps,
} from '~/utils/images-optimization';

import { Image as OptimizedImage, imageConfig } from 'astro:assets';

type Props = ImageProps;
type ImageType = {
  src: string;
  attributes: AttributesProps;
};

const props = Astro.props;

if (props.alt === undefined || props.alt === null) {
  throw new Error('Alt not defined');
}

if (typeof props.width === 'string') {
  props.width = parseInt(props.width);
}

if (typeof props.height === 'string') {
  props.height = parseInt(props.height);
}

if (!props.loading) {
  props.loading = 'lazy';
}

if (!props.decoding) {
  props.decoding = 'async';
}

const _image = await findImage(props.src);

let image: ImageType | undefined = undefined;

if (_image !== null && typeof _image === 'object') {
  image = await getImagesOptimized(_image, props, astroAsseetsOptimizer);
} else if (typeof _image === 'string' && (_image.startsWith('http://') || _image.startsWith('https://'))) {
  image = await getImagesOptimized(_image, props, unpicOptimizer);
} else if (_image) {
  image = await getImagesOptimized(_image, props);
}

// Below does not work

const imgSrc = image?.src.startsWith('/images') ? '../../assets' + image?.src : image?.src;
let publicImage = !imgSrc?.startsWith('../../assets') || true;

// const skip = [
//   "event",
//   "communication"
// ]

// for(const skipWord of skip){
//   if(publicImage){
//     break;
//   }
//   publicImage = image?.src.includes(skipWord) || true;
// }

// if(!publicImage){
//   console.log(imgSrc)
// }

const importedImage = imgSrc && !publicImage ? import(imgSrc) : null;

// const publicImage = true;

// console.log(image?.src)
// console.log(imgSrc)
---

{publicImage && <img src={image?.src} {...image?.attributes} />}
{!publicImage && (!image ? <Fragment /> : <OptimizedImage src={importedImage} {...image?.attributes} />)}
