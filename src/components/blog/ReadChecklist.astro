---
interface Props {
  postId: string;
  postTitle: string;
  slug: string;
}

const { postId, postTitle, slug } = Astro.props;
const isLocalhost = Astro.url.hostname === 'localhost';
const currentPath = Astro.url.pathname;
const gaUrl = `https://analytics.google.com/analytics/web/#/p238520355/reports/explorer?params=_u..nav%3Dmaui%26_r.explorerCard..filterTerm%3D%252F${currentPath.slice(1)}%26_r.explorerCard..startRow%3D0%26_u.dateOption%3Dlast12Months%26_u.comparisonOption%3Ddisabled&r=all-pages-and-screens&ruid=all-pages-and-screens,life-cycle,engagement&collectionId=life-cycle`;
const mainSiteUrl = `https://www.ankushchoubey.com${currentPath}`;
const clarityUrl = `https://clarity.microsoft.com/projects/qc6j7d4654/heatmaps?url=${encodeURIComponent(mainSiteUrl)}`;

// Ensure the slug has the same format as in DevModeIndicator
const formattedSlug = slug.startsWith('/') ? slug : `/${slug}`;

// Checklist items with their display values
const checklistItems = [
  { key: 'content_finished', display: 'Content finished' },
  { key: 'perplexity_research', display: 'Researched with Perplexity' },
  { key: 'grammarly_review', display: 'Grammarly reviewed' },
  { key: 'tests_passing', display: 'Test passing' },
  { key: 'social_promotion', display: 'Promoted on social media' }
];
---

<div class="flex flex-col gap-2 mt-4">
  <label class="read-checkbox-label" for={`read-${postId}`}>
    <input
      type="checkbox"
      id={`read-${postId}`}
      class="read-checkbox"
      data-post-id={postId}
      data-post-title={postTitle}
      data-slug={formattedSlug}
    />
    <span class="checkmark">✓</span>
    <span class="label-text">Mark as read</span>
  </label>

  {isLocalhost && (
    <div class="bg-white dark:bg-gray-800 text-black dark:text-white px-4 py-2 rounded-lg shadow-lg relative z-10">
      <div class="flex items-center justify-between mb-2">
        <div class="text-sm font-medium">Post Checklist</div>
        <button 
          id={`toggleChecklist-${postId}`}
          class="text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
          title="Toggle checklist visibility"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </button>
      </div>
      <div class="space-y-1" id={`postChecklist-${postId}`}>
        {checklistItems.map(item => (
          <label class="checklist-label">
            <input 
              type="checkbox" 
              class="checklist-checkbox"
              data-key={item.key}
              data-post-id={postId}
              data-slug={formattedSlug}
            />
            <span class="checkmark">✓</span>
            <span class="label-text">{item.display}</span>
          </label>
        ))}
      </div>
      <div class="flex items-center gap-2 mt-2 text-sm">
        <a 
          href={gaUrl} 
          target="_blank" 
          rel="noopener noreferrer" 
          class="underline hover:text-gray-800"
          title="View in Google Analytics"
        >
          GA
        </a>
        <a 
          href={mainSiteUrl} 
          target="_blank" 
          rel="noopener noreferrer" 
          class="underline hover:text-gray-800"
          title="View on main website"
        >
          Live
        </a>
        <a 
          href={clarityUrl} 
          target="_blank" 
          rel="noopener noreferrer" 
          class="underline hover:text-gray-800"
          title="View heatmaps in Microsoft Clarity"
        >
          Heatmap
        </a>
      </div>
    </div>
  )}
</div>

<style>
  .read-checkbox-label {
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    position: relative;
    padding-left: 32px;
    user-select: none;
    z-index: 10;
  }

  .read-checkbox {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;
    z-index: 20;
  }

  .checkmark {
    position: absolute;
    left: 0;
    height: 24px;
    width: 24px;
    background-color: #ffffff;
    border: 2px solid #e2e8f0;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: transparent;
    transition: all 0.2s ease;
    z-index: 15;
  }

  .dark .checkmark {
    background-color: #1e293b;
    border-color: #475569;
  }

  /* Hover state */
  .read-checkbox-label:hover .checkmark {
    border-color: #10B981;
  }

  /* Checked state */
  .read-checkbox:checked + .checkmark {
    background-color: #10B981;
    border-color: #10B981;
    color: white;
  }

  .label-text {
    font-size: 0.875rem;
    color: #64748b;
    z-index: 10;
  }

  .dark .label-text {
    color: #94a3b8;
  }

  .checklist-label {
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    position: relative;
    padding-left: 32px;
    user-select: none;
    z-index: 10;
  }

  .checklist-checkbox {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;
    z-index: 20;
  }

  /* Checklist checkbox checked state */
  .checklist-checkbox:checked + .checkmark {
    background-color: #10B981;
    border-color: #10B981;
    color: white;
  }

  /* Checklist label hover state */
  .checklist-label:hover .checkmark {
    border-color: #10B981;
  }

  [id^="postChecklist-"] {
    transition: all 0.3s ease;
    position: relative;
    z-index: 5;
  }

  [id^="postChecklist-"].hidden {
    display: none;
  }

  [id^="toggleChecklist-"] {
    transition: transform 0.3s ease;
    z-index: 15;
  }

  [id^="toggleChecklist-"].rotated {
    transform: rotate(180deg);
  }
</style>

<script>
  import { 
    isPostRead, 
    setPostRead, 
    getChecklistState, 
    saveChecklistState, 
    isChecklistVisible, 
    setChecklistVisible 
  } from '../../utils/localStorage';

  // Initialize checkboxes from localStorage
  function initializeCheckboxes() {
    console.log('Initializing checkboxes');
    const checkboxes = document.querySelectorAll('input[type="checkbox"][data-post-id]');
    console.log('Found checkboxes:', checkboxes.length);
    
    checkboxes.forEach((checkbox) => {
      const postId = checkbox.getAttribute('data-post-id');
      const slug = checkbox.getAttribute('data-slug');
      if (postId && slug) {
        const isRead = isPostRead(slug);
        (checkbox as HTMLInputElement).checked = isRead;
        console.log(`Set checkbox ${postId} to ${isRead}`);
      }
    });
  }

  // Handle checkbox changes
  function handleCheckboxChange(event: Event) {
    const checkbox = event.target as HTMLInputElement;
    const postId = checkbox.getAttribute('data-post-id');
    const slug = checkbox.getAttribute('data-slug');
    
    if (postId && slug) {
      setPostRead(slug, checkbox.checked);
      console.log(`Saved checkbox state for ${postId}: ${checkbox.checked}`);
      
      // Force update the checkbox state in the UI
      checkbox.checked = checkbox.checked;
    }
  }

  // Initialize all checklists
  function initializeAllChecklists() {
    console.log('Initializing all checklists');
    
    // Get all checklist containers
    const checklistContainers = document.querySelectorAll('[id^="postChecklist-"]');
    console.log('Found checklist containers:', checklistContainers.length);
    
    checklistContainers.forEach(container => {
      const containerId = container.id;
      const postId = containerId.replace('postChecklist-', '');
      console.log('Processing checklist for postId:', postId);
      
      // Get the toggle button for this checklist
      const toggleButton = document.getElementById(`toggleChecklist-${postId}`);
      if (!toggleButton) {
        console.log('Toggle button not found for postId:', postId);
        return;
      }
      
      // Get all checkboxes in this checklist - specifically the checklist checkboxes
      const checkboxes = container.querySelectorAll('input.checklist-checkbox');
      console.log('Found checkboxes:', checkboxes.length);
      
      // Get the slug from the first checkbox
      const firstCheckbox = checkboxes[0] as HTMLInputElement;
      const slug = firstCheckbox?.getAttribute('data-slug');
      if (!slug) {
        console.log('Slug not found for postId:', postId);
        return;
      }
      console.log('Using slug:', slug);
      
      // Load saved state for this checklist
      const savedChecks = getChecklistState(slug);
      console.log('Loaded saved checks:', savedChecks);
      
      // Set initial state for each checkbox
      checkboxes.forEach(checkbox => {
        const key = checkbox.getAttribute('data-key');
        if (!key) return;
        
        // Set initial state from localStorage
        const isChecked = savedChecks[key] || false;
        (checkbox as HTMLInputElement).checked = isChecked;
        console.log(`Initial state - slug: ${slug}, key: ${key}, value: ${isChecked}`);
        
        // Add change listener - using the same approach as DevModeIndicator
        checkbox.addEventListener('change', (e) => {
          const target = e.target as HTMLInputElement;
          if (!target || !key) return;
          
          console.log(`Checkbox changed - slug: ${slug}, key: ${key}, value: ${target.checked}`);
          
          // Update the saved state
          const newState = { ...savedChecks, [key]: target.checked };
          saveChecklistState(slug, newState);
        });
      });
      
      // Set initial visibility
      const isVisible = isChecklistVisible(slug);
      if (!isVisible) {
        container.classList.add('hidden');
        toggleButton.classList.add('rotated');
      }
      
      // Add toggle button listener
      toggleButton.addEventListener('click', () => {
        console.log('Toggle button clicked for postId:', postId);
        container.classList.toggle('hidden');
        toggleButton.classList.toggle('rotated');
        setChecklistVisible(slug, !container.classList.contains('hidden'));
      });
    });
  }

  // Add event listeners
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM Content Loaded');
    
    // Initialize read checkboxes
    initializeCheckboxes();
    
    // Add change listeners to read checkboxes
    const readCheckboxes = document.querySelectorAll('input[type="checkbox"][data-post-id]');
    readCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener('change', handleCheckboxChange);
    });
    
    // Initialize all checklists
    initializeAllChecklists();
    
    // Also initialize after a short delay to ensure all content is loaded
    setTimeout(() => {
      console.log('Running delayed initialization');
      initializeAllChecklists();
    }, 500);
  });
</script> 